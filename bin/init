#!/usr/bin/env node

const os = require('os');
const fs = require('fs');
const path = require('path');
const https = require('https');
const chalk = require('chalk');
const log = require('debug')('irs-tax-filler');
const fill = require('../src');

const IRS_URL = 'https://www.irs.gov/pub/irs-pdf';
const year = `${new Date().getUTCFullYear() - 1}`;
const taxFormsPath = path.join(process.cwd(), 'tax-forms', year);
const files = [
	{ name: 'f1040.pdf' },
	{ name: 'f1040s3.pdf' },
	{ name: 'f8849.pdf' }, // was f1040s6 in 2018 tax year
	{ name: 'f1116.pdf', as: 'f1116amt.pdf' },
	{ name: 'f1116.pdf' },
	{ name: 'f6251.pdf' },
	{ name: 'f8938.pdf' },
	{ name: 'f8965.pdf' }
];

async function download(url, dest) {
	return new Promise((resolve, reject) => {
		if (fs.existsSync(dest)) {
			return resolve();
		}
		const file = fs.createWriteStream(dest);
		log(chalk.grey(`Downloading: ${url} into ${dest}`));
		https.get(url, (response) => {
			response.pipe(file);
			file.on('finish', () => {
				file.close();
				resolve();
			});
		}).on('error', (err) => {
			fs.unlink(dest);
			throw err;
		});
	});
}

function makeOutputDirectory() {
	return new Promise((resolve, reject) => {
		if (fs.existsSync(taxFormsPath)) {
			return resolve();
		}
		fs.mkdir(taxFormsPath, { recursive: true }, (err) => {
			if (err) {
				return reject(err);
			}
			return resolve();
		});
	});
}

function downloadIRSPDF() {
	if (!fs.existsSync(taxFormsPath)) {
		fs.mkdirSync(taxFormsPath, { recursive: true });
	}

	const promises = files
		.map(file => {
			return download(
				`${IRS_URL}/${file.name}`,
				path.join(taxFormsPath, file.as || file.name)
			);
		});

	return Promise.all(promises);
}

function generateFormData() {
	return fill(year, path.resolve(__dirname, '..', 'example.yaml'), {
		generate: true
	});
}

downloadIRSPDF(taxFormsPath)
	.then(makeOutputDirectory)
	.then(generateFormData)
	.catch(err => {
		console.error(chalk.red(err));
		process.exit(-1);
	});
