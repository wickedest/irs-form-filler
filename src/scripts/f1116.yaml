name:
  0: ctx.firstName + ' ' + ctx.middleInitial + ' ' + ctx.lastName

ssn.nodash:
  1: ctx.ssn

category.of.income:
  value:
    '"General category income"'
  calculate: |
    (ctx, value) => {
      return {
        'section 951a income':                  { fill: '1', field: '2' },
        'foreign branch income':                { fill: '2', field: '3' },
        'passive category income':              { fill: '3', field: '4' },
        'general category income':              { fill: '4', field: '5' },
        'section 901 (j) income':               { fill: '5', field: '6' },
        'certain income re-sourced by treaty':  { fill: '6', field: '7' },
        'Lump-sum distributions':               { fill: '7', field: '8' }
      }[value.toLowerCase()];
    }

line.h:
  9: ctx.address.country

line.i.A.foreign.country:
  10: ctx.address.country

line.i.1a.text.1.gross.income.from.sources:
  13: '"From wages"'

line.i.1a.text.2.gross.income.from.sources:
  14:

line.i.1a.text.3.gross.income.from.sources:
  15:

line.1a.A.whole:
  16: (ctx.financial.income / ctx.financial.averageExchangeRate)

line.1a.total.whole:
  19: (ctx.financial.income / ctx.financial.averageExchangeRate)

line.3a.A.whole:
  # same as f1040 line.12.standard.deduction.whole, however, this gets filled
  # before f1040 (circular dependency).
  value:
    ctx.financial.filingStatus.toLowerCase()
  calculate: |
    (ctx, value) => {
      return {
        'single':                    { fill: 13850, field: '24' },
        'married filing separately': { fill: 13850, field: '24' },
        'married filing jointly':    { fill: 27700, field: '24' },
        'qualifying widow(er)':      { fill: 27700, field: '24' },
        'head of household':         { fill: 20800, field: '24' }
      }[value];
    }

line.3c.A.whole:
  30: ctx.forms["f1116"]["line.3a.A.whole"] + ctx.forms["f1116"]["line.3b.A"]

line.3d.A.whole:
  33: ctx.financial.income / ctx.financial.averageExchangeRate

line.3e.A.whole:
  36: currency((ctx.financial.income / ctx.financial.averageExchangeRate))

line.3f.A:
  39: (ctx.forms["f1116"]["line.3d.A.whole"] / ctx.forms["f1116"]["line.3e.A.whole"] || 1).toFixed(4)

line.3g.A.whole:
  42: ctx.forms["f1116"]["line.3c.A.whole"] * ctx.forms["f1116"]["line.3f.A"]

line.6.A.whole:
  54: ctx.forms["f1116"]["line.2.A.whole"] +
    ctx.forms["f1116"]["line.3g.A.whole"] +
    ctx.forms["f1116"]["line.4a.A.whole"] +
    ctx.forms["f1116"]["line.4b.A.whole"] +
    ctx.forms["f1116"]["line.5.A.whole"]

line.6.total.whole:
  57: ctx.forms["f1116"]["line.6.A.whole"]

line.7.whole:
  58: ctx.forms["f1116"]["line.1a.total.whole"] - ctx.forms["f1116"]["line.6.total.whole"]

part2.credit-claim-type:
  value:
    '"paid"'
  calculate: |
    (ctx, value) => {
      return {
        'paid':    { fill: 'Paid', field: '59' },
        'accrued': { fill: 'Accrued', field: '60' }
      }[value];
    }

part2.A.l:
  61: ctx.financial.endOfTaxYear

part2.A.t.whole:
  69: ctx.financial.incomeTax / ctx.financial.averageExchangeRate

part2.A.u.whole:
  70: ctx.forms["f1116"]["part2.A.t.whole"]

line.8.whole:
  91: ctx.forms["f1116"]["part2.A.u.whole"]

line.9.whole:
  92: ctx.forms["f1116"]["line.8.whole"]

line.10.carryback.whole:
  94: ctx.forms["f1116sb"]["page.2.row.3.subtotal"] || 0

line.11.whole:
  95: |
    ctx.forms["f1116"]["line.9.whole"]
    + ctx.forms["f1116"]["line.10.carryback.whole"]

line.12.whole:
  96: 0

line.13.whole:
  97: 0

line.14.whole:
  98: |
    ctx.forms["f1116"]["line.11.whole"]
    + ctx.forms["f1116"]["line.12.whole"]
    + ctx.forms["f1116"]["line.13.whole"]

line.15.whole:
  99: ctx.forms["f1116"]["line.7.whole"]

line.17.whole:
  101: ctx.forms["f1116"]["line.15.whole"] + ctx.forms["f1116"]["line.16.whole"]

line.18.whole:
  102: ctx.forms["f1040"]["line.15.taxable.income.whole"]

line.19.whole:
  # Divide line 17 by line 18. If line 17 is more than line 18, enter “1”
  # This math works because if 17 > 18, then we get a value > 1 and Math.min
  # will pick 1.
  103: Math.min(1, ctx.forms["f1116"]["line.17.whole"] / ctx.forms["f1116"]["line.18.whole"])

line.20.whole:
  # Enter the total of Form 1040 or 1040-SR, line 12a
  104: ctx.forms["f1040"]["line.16.tax.whole"]

line.21.whole:
  # Multiply line 20 by line 19 (maximum amount of credit)
  105: |
    ctx.forms["f1116"]["line.20.whole"]
    * ctx.forms["f1116"]["line.19.whole"]

line.22.whole:
  # Increase in limitation section 960(c)
  106: 0

line.23.whole:
  # Add lines 21 and 22
  107: |
    ctx.forms["f1116"]["line.21.whole"]
    + ctx.forms["f1116"]["line.22.whole"]

line.24.whole:
  # Enter the smaller of line 14 or line 23
  108: |
    Math.min(
      ctx.forms["f1116"]["line.14.whole"],
      ctx.forms["f1116"]["line.23.whole"]
    )

line.28.whole:
  # Credit for taxes on "general category income" (this part is `category.of.income` above)
  112: ctx.forms["f1116"]["line.24.whole"]

line.32.whole:
  # Add lines 25 through 31
  116: ctx.forms["f1116"]["line.25.whole"] +
    ctx.forms["f1116"]["line.26.whole"] +
    ctx.forms["f1116"]["line.27.whole"] +
    ctx.forms["f1116"]["line.28.whole"] +
    ctx.forms["f1116"]["line.29.whole"] +
    ctx.forms["f1116"]["line.30.whole"] +
    ctx.forms["f1116"]["line.31.whole"]

line.33.whole:
  # Enter the smaller of line 20 or line 32
  117: Math.min(ctx.forms["f1116"]["line.20.whole"], ctx.forms["f1116"]["line.32.whole"])

line.34.whole:
  # Reduction of credit for international boycott operations.
  118: 0

line.35.foreign.tax.credit.whole:
  # Subtract line 34 from line 33. This is your foreign tax credit.
  119: ctx.forms["f1116"]["line.33.whole"] - ctx.forms["f1116"]["line.34.whole"]
